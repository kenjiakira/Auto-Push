const fs = require('fs');
const path = require('path');

const playerDataPath = path.join(__dirname, '../../json/playerData.json');
const questsPath = path.join(__dirname, '../../json/quests.json');

function loadPlayerData(playerID) {
    if (fs.existsSync(playerDataPath)) {
        const data = JSON.parse(fs.readFileSync(playerDataPath, 'utf8'));
        return data[playerID] || null;
    }
    return null;
}

function savePlayerData(playerID, playerData) {
    let data = {};
    if (fs.existsSync(playerDataPath)) {
        data = JSON.parse(fs.readFileSync(playerDataPath, 'utf8'));
    }
    data[playerID] = playerData;
    fs.writeFileSync(playerDataPath, JSON.stringify(data, null, 2), 'utf8');
}

function loadQuests() {
    if (fs.existsSync(questsPath)) {
        return JSON.parse(fs.readFileSync(questsPath, 'utf8'));
    }
    return { quests: [] };
}

function checkAndCompleteQuests(playerData) {
    const quests = loadQuests().quests;
    let completedQuestIds = playerData.quests.map(q => q.id);

    quests.forEach(quest => {
        if (!completedQuestIds.includes(quest.id) && !playerData.quests.some(q => q.id === quest.id && q.isCompleted)) {
            if (quest.goal.type === 'strength' && playerData.strength >= quest.goal.value) {
                playerData.gold += quest.reward.gold;
                playerData.quests.push({
                    id: quest.id,
                    name: quest.name,
                    isCompleted: true
                });

                if (quest.nextQuestId) {
                    const nextQuest = quests.find(q => q.id === quest.nextQuestId);
                    if (nextQuest) {
                        playerData.quests.push({
                            id: nextQuest.id,
                            name: nextQuest.name,
                            isCompleted: false
                        });
                    }
                }

                savePlayerData(playerData.id, playerData);
            } else if (quest.goal.type === 'explore' && playerData.explorationCount >= quest.goal.value) {
                playerData.gold += quest.reward.gold;
                playerData.quests.push({
                    id: quest.id,
                    name: quest.name,
                    isCompleted: true
                });

                if (quest.nextQuestId) {
                    const nextQuest = quests.find(q => q.id === quest.nextQuestId);
                    if (nextQuest) {
                        playerData.quests.push({
                            id: nextQuest.id,
                            name: nextQuest.name,
                            isCompleted: false
                        });
                    }
                }

                savePlayerData(playerData.id, playerData);
            }
        }
    });
}

function exploreArea(playerData) {
    const areas = [
        {
            name: "R·ª´ng R·∫≠m",
            description: "M·ªôt khu r·ª´ng r·∫≠m r·∫°p v·ªõi nhi·ªÅu c√¢y c·ªëi v√† ƒë·ªông v·∫≠t hoang d√£.",
            goldReward: 10,
            healthLoss: 5
        },
        {
            name: "Hang ƒê·ªông",
            description: "M·ªôt hang ƒë·ªông s√¢u v√† t·ªëi tƒÉm, ch·ª©a nhi·ªÅu kho b√°u v√† m·ªëi nguy hi·ªÉm.",
            goldReward: 20,
            healthLoss: 10
        },
        {
            name: "Th·ªã Tr·∫•n",
            description: "M·ªôt th·ªã tr·∫•n y√™n b√¨nh v·ªõi nhi·ªÅu c·ª≠a h√†ng v√† ng∆∞·ªùi d√¢n.",
            goldReward: 0,
            healthLoss: 0
        }
    ];

    const area = areas[Math.floor(Math.random() * areas.length)];

    playerData.gold += area.goldReward;
    playerData.health -= area.healthLoss;

    if (playerData.health <= 0) {
        playerData.health = 0;
        savePlayerData(playerData.id, playerData);
        return {
            result: "Thua",
            message: `B·∫°n ƒë√£ kh√°m ph√° khu v·ª±c "${area.name}" v√† b·ªã th∆∞∆°ng n·∫∑ng. B·∫°n kh√¥ng th·ªÉ ti·∫øp t·ª•c cu·ªôc phi√™u l∆∞u!`
        };
    }

    playerData.explorationCount = (playerData.explorationCount || 0) + 1;
    checkAndCompleteQuests(playerData);

    savePlayerData(playerData.id, playerData);

    return {
        result: "Kh√°m Ph√° Th√†nh C√¥ng",
        message: `B·∫°n ƒë√£ kh√°m ph√° khu v·ª±c "${area.name}"!\n\n` +
                 `${area.description}\n` +
                 `üí∞ B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c ${area.goldReward} v√†ng v√† m·∫•t ${area.healthLoss} ƒëi·ªÉm s·ª©c kh·ªèe.\n\n` +
                 `S·ª©c kh·ªèe hi·ªán t·∫°i c·ªßa b·∫°n: ${playerData.health}\n` +
                 `V√†ng hi·ªán t·∫°i c·ªßa b·∫°n: ${playerData.gold}`
    };
}

module.exports.config = {
    name: "explore",
    version: "1.0.0",
    hasPermission: 0,
    credits: "Ho√†ng Ng·ªçc T·ª´",
    description: "Kh√°m ph√° c√°c khu v·ª±c trong th·∫ø gi·ªõi tr√≤ ch∆°i.",
    commandCategory: "Adventure",
    usePrefix: true,
    usages: "s·ª≠ d·ª•ng: .explore",
    cooldowns: 10,
};

module.exports.run = async ({ event, api }) => {
    const { senderID, threadID } = event;

    let playerData = loadPlayerData(senderID);

    if (!playerData) {
        return api.sendMessage("B·∫°n ch∆∞a kh·ªüi t·∫°o nh√¢n v·∫≠t. H√£y b·∫Øt ƒë·∫ßu cu·ªôc phi√™u l∆∞u tr∆∞·ªõc khi kh√°m ph√° th·∫ø gi·ªõi.", threadID);
    }

    const exploreResult = exploreArea(playerData);

    api.sendMessage(exploreResult.message, threadID);
};
