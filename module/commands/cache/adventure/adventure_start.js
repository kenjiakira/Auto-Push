const fs = require('fs');
const path = require('path');

const playerDataPath = path.join(__dirname, '../../json/playerData.json');
const questsPath = path.join(__dirname, '../../json/quests.json');

// H√†m t·∫£i d·ªØ li·ªáu ng∆∞·ªùi ch∆°i
function loadPlayerData(playerID) {
    if (fs.existsSync(playerDataPath)) {
        const data = JSON.parse(fs.readFileSync(playerDataPath, 'utf8'));
        const playerData = data[playerID] || null;
        if (playerData && !playerData.quests) {
            playerData.quests = []; // Kh·ªüi t·∫°o thu·ªôc t√≠nh quests n·∫øu ch∆∞a c√≥
            savePlayerData(playerID, playerData);
        }
        return playerData;
    }
    return null;
}

// H√†m l∆∞u d·ªØ li·ªáu ng∆∞·ªùi ch∆°i
function savePlayerData(playerID, playerData) {
    let data = {};
    if (fs.existsSync(playerDataPath)) {
        data = JSON.parse(fs.readFileSync(playerDataPath, 'utf8'));
    }
    data[playerID] = playerData;
    fs.writeFileSync(playerDataPath, JSON.stringify(data, null, 2), 'utf8');
}

// H√†m t·∫£i nhi·ªám v·ª•
function loadQuests() {
    if (fs.existsSync(questsPath)) {
        return JSON.parse(fs.readFileSync(questsPath, 'utf8'));
    }
    return { quests: [] };
}
function createNewCharacter(playerID, name) {
    const newCharacter = {
        name: name, 
        health: 100,
        strength: 10,
        gold: 500,
        inventory: [],
        location: "L√†ng Kh·ªüi ƒê·∫ßu",
        quests: [
            {
                id: "quest1",
                name: "ƒê·∫°t 100 S·ª©c M·∫°nh",
                isCompleted: false
            }
        ]
    };
    savePlayerData(playerID, newCharacter); // L∆∞u d·ªØ li·ªáu ng∆∞·ªùi ch∆°i v·ªõi ID h·ª£p l·ªá
    return newCharacter;
}

function initializeFirstQuest(playerData) {
    const quests = loadQuests().quests;
    const firstQuest = quests.find(q => q.id === "quest1"); // ID c·ªßa nhi·ªám v·ª• ƒë·∫ßu ti√™n

    if (firstQuest) {
        playerData.quests.push({
            id: firstQuest.id,
            name: firstQuest.name,
            isCompleted: false
        });
        savePlayerData(playerData.id, playerData);
    }
}
function checkAndCompleteQuests(playerData) {
    const quests = loadQuests().quests;
    let completedQuestIds = playerData.quests.filter(q => q.isCompleted).map(q => q.id);

    quests.forEach(quest => {
        if (!completedQuestIds.includes(quest.id) && playerData.quests.some(q => q.id === quest.id && !q.isCompleted)) {
            if (quest.goal.type === 'strength' && playerData.strength >= quest.goal.value) {
                playerData.gold += quest.reward.gold;
                playerData.quests.find(q => q.id === quest.id).isCompleted = true;

                if (quest.nextQuestId) {
                    const nextQuest = quests.find(q => q.id === quest.nextQuestId);
                    if (nextQuest) {
                        playerData.quests.push({
                            id: nextQuest.id,
                            name: nextQuest.name,
                            isCompleted: false
                        });
                    }
                }

                savePlayerData(playerData.id, playerData);
            } else if (quest.goal.type === 'explore' && playerData.explorationCount >= quest.goal.value) {
                playerData.gold += quest.reward.gold;
                playerData.quests.find(q => q.id === quest.id).isCompleted = true;

                if (quest.nextQuestId) {
                    const nextQuest = quests.find(q => q.id === quest.nextQuestId);
                    if (nextQuest) {
                        playerData.quests.push({
                            id: nextQuest.id,
                            name: nextQuest.name,
                            isCompleted: false
                        });
                    }
                }

                savePlayerData(playerData.id, playerData);
            }
        }
    });
}


module.exports.config = {
    name: "start",
    version: "1.0.0",
    hasPermission: 0,
    credits: "Ho√†ng Ng·ªçc T·ª´",
    description: "Kh·ªüi t·∫°o cu·ªôc phi√™u l∆∞u m·ªõi ho·∫∑c ti·∫øp t·ª•c cu·ªôc phi√™u l∆∞u hi·ªán t·∫°i",
    commandCategory: "Adventure",
    usePrefix: true,
    usages: "s·ª≠ d·ª•ng: .adventure_start",
    cooldowns: 5, 
};
module.exports.run = async ({ event, api }) => {
    const { senderID, threadID } = event;

    if (!senderID) {
        return api.sendMessage("ID ng∆∞·ªùi ch∆°i kh√¥ng x√°c ƒë·ªãnh.", threadID);
    }

    let playerData = loadPlayerData(senderID);

    if (!playerData) {
        playerData = createNewCharacter(senderID);
        initializeFirstQuest(playerData); // Kh·ªüi t·∫°o nhi·ªám v·ª• ƒë·∫ßu ti√™n
        api.sendMessage("Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi cu·ªôc phi√™u l∆∞u m·ªõi! B·∫°n ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o v·ªõi nh√¢n v·∫≠t m·ªõi v√† nhi·ªám v·ª• ƒë·∫ßu ti√™n.", threadID);
    } else if (playerData.name === "Anh H√πng V√¥ Danh") {
        api.sendMessage("B·∫°n c·∫ßn ƒë·∫∑t t√™n cho nh√¢n v·∫≠t c·ªßa m√¨nh tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu cu·ªôc phi√™u l∆∞u.", threadID);
    } else {
        api.sendMessage("B·∫°n ƒë√£ ti·∫øp t·ª•c cu·ªôc phi√™u l∆∞u c·ªßa m√¨nh.", threadID);

        checkAndCompleteQuests(playerData); // Ki·ªÉm tra v√† ho√†n th√†nh nhi·ªám v·ª•

        const welcomeMessage = `üõ°Ô∏è ${playerData.name} üõ°Ô∏è\n\n` +
            `üìç ƒê·ªãa ƒëi·ªÉm hi·ªán t·∫°i: ${playerData.location}\n` +
            `‚ù§Ô∏è S·ª©c kh·ªèe: ${playerData.health}\n` +
            `üí™ S·ª©c m·∫°nh: ${playerData.strength}\n` +
            `üí∞ V√†ng: ${playerData.gold}\n\n` +
            `üìú Nhi·ªám v·ª•: ${playerData.quests.filter(q => !q.isCompleted).map(q => q.name).join(", ") || "Kh√¥ng c√≥ nhi·ªám v·ª• n√†o."}\n\n` +
            "B·∫°n mu·ªën l√†m g√¨ ti·∫øp theo?\n" +
            "1. Kh√°m ph√° khu v·ª±c\n" +
            "2. Ki·ªÉm tra t√¨nh tr·∫°ng\n" +
            "3. Tham gia chi·∫øn ƒë·∫•u\n" +
            "4. Xem nhi·ªám v·ª•\n" +
            "5. Nh·∫≠n nhi·ªám v·ª• m·ªõi\n" +
            "H√£y nh·∫≠p l·ªánh t∆∞∆°ng ·ª©ng: adv explore, adv status, adv battle, adv quests, ho·∫∑c adv accept [id].";

        api.sendMessage(welcomeMessage, threadID);
    }
};
