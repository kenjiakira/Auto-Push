const fs = require('fs');
const path = require('path');

const playerDataPath = path.join(__dirname, '../../json/playerData.json');

// H√†m t·∫£i d·ªØ li·ªáu ng∆∞·ªùi ch∆°i
function loadPlayerData(playerID) {
    if (fs.existsSync(playerDataPath)) {
        const data = JSON.parse(fs.readFileSync(playerDataPath, 'utf8'));
        return data[playerID] || null;
    }
    return null;
}

// H√†m l∆∞u d·ªØ li·ªáu ng∆∞·ªùi ch∆°i
function savePlayerData(playerID, playerData) {
    let data = {};
    if (fs.existsSync(playerDataPath)) {
        data = JSON.parse(fs.readFileSync(playerDataPath, 'utf8'));
    }
    data[playerID] = playerData;
    fs.writeFileSync(playerDataPath, JSON.stringify(data, null, 2), 'utf8');
}

// H√†m t·∫°o nh√¢n v·∫≠t m·ªõi v·ªõi thu·ªôc t√≠nh nhi·ªám v·ª• kh·ªüi t·∫°o
function createNewCharacter(playerID) {
    const newCharacter = {
        name: "Anh H√πng V√¥ Danh",
        health: 100,
        strength: 10,
        gold: 500,
        inventory: [],
        location: "L√†ng Kh·ªüi ƒê·∫ßu",
        quests: [] // Kh·ªüi t·∫°o thu·ªôc t√≠nh quests l√† m·∫£ng r·ªóng
    };
    savePlayerData(playerID, newCharacter);
    return newCharacter;
}

// H√†m ho√†n th√†nh nhi·ªám v·ª•
function completeQuest(playerData, questId) {
    const questIndex = playerData.quests.findIndex(q => q.id === questId);
    if (questIndex === -1) {
        return "Nhi·ªám v·ª• kh√¥ng t·ªìn t·∫°i.";
    }

    const quest = playerData.quests[questIndex];
    if (quest.isCompleted) {
        return "Nhi·ªám v·ª• n√†y ƒë√£ ƒë∆∞·ª£c ho√†n th√†nh.";
    }

    // C·∫≠p nh·∫≠t nhi·ªám v·ª• th√†nh ƒë√£ ho√†n th√†nh
    playerData.quests[questIndex].isCompleted = true;
    savePlayerData(playerData.id, playerData);

    // Th∆∞·ªüng cho ng∆∞·ªùi ch∆°i
    playerData.gold += quest.reward;
    savePlayerData(playerData.id, playerData);

    return `B·∫°n ƒë√£ ho√†n th√†nh nhi·ªám v·ª• "${quest.name}" v√† nh·∫≠n ƒë∆∞·ª£c ${quest.reward} v√†ng.`;
}

module.exports.config = {
    name: "quests",
    version: "1.0.0",
    hasPermission: 0,
    credits: "Ho√†ng Ng·ªçc T·ª´",
    description: "Xem v√† nh·∫≠n nhi·ªám v·ª•",
    commandCategory: "Adventure",
    usePrefix: true,
    usages: "s·ª≠ d·ª•ng: .quests ho·∫∑c .accept [id]",
    cooldowns: 10,
};

module.exports.run = async ({ event, api, args }) => {
    const { senderID, threadID } = event;

    let playerData = loadPlayerData(senderID);

    if (!playerData) {
        return api.sendMessage("B·∫°n ch∆∞a kh·ªüi t·∫°o nh√¢n v·∫≠t. H√£y b·∫Øt ƒë·∫ßu cu·ªôc phi√™u l∆∞u tr∆∞·ªõc khi xem nhi·ªám v·ª•.", threadID);
    }

    // ƒê·∫£m b·∫£o thu·ªôc t√≠nh quests ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o
    if (!Array.isArray(playerData.quests)) {
        playerData.quests = [];
    }

    if (args[0] === "accept") {
        const questId = args[1];
        const message = completeQuest(playerData, questId);
        return api.sendMessage(message, threadID);
    }

    const incompleteQuests = playerData.quests.filter(q => !q.isCompleted);

    const questMessage = incompleteQuests.length > 0 ?
        `üìú Nhi·ªám v·ª• hi·ªán t·∫°i c·ªßa b·∫°n:\n` +
        `${incompleteQuests.map(q => `- ${q.name}: ${q.description}`).join('\n')}` :
        "B·∫°n kh√¥ng c√≥ nhi·ªám v·ª• n√†o ƒëang th·ª±c hi·ªán.";

    api.sendMessage(questMessage, threadID);
};
