const fs = require('fs');
const path = require('path');
const axios = require('axios');

const cost = 10000;
const imagePath = path.join(__dirname, 'json', 'leakonly.json');
const groupsPath = path.join(__dirname, 'noti','groups.json');

function readOrCreateData(filePath) {
    if (!fs.existsSync(filePath)) {
        fs.writeFileSync(filePath, JSON.stringify([]), 'utf8');
    }
    const rawData = fs.readFileSync(filePath);
    return JSON.parse(rawData);
}

function isNSFWGroup(threadID) {
    const groupsData = readOrCreateData(groupsPath);
    const group = groupsData.find(g => g.threadID === threadID);
    return group && group.SNFW === true;
}

module.exports.config = {
    name: "leakonly",
    version: "1.0.0",
    hasPermission: 0,
    credits: "Ho√†ng Ng·ªçc T·ª´",
    description: "Ch·ªâ b√°n qu·∫°tüåö NSFW",
    commandCategory: "T√†i Ch√≠nh",
    usePrefix: true,
    usages: [
            "L·ªánh n√†y ch·ªâ th·ª±c hi·ªán h√†nh ƒë·ªông khi ƒë∆∞·ª£c s·ª≠ d·ª•ng trong nh√≥m NSFW.",
            "Khi s·ª≠ d·ª•ng l·ªánh, b·∫°n c·∫ßn c√≥ √≠t nh·∫•t 10.000 xu trong t√†i kho·∫£n c·ªßa m√¨nh.",
            "L·ªánh n√†y s·∫Ω g·ª≠i cho b·∫°n m·ªôt s·ªë ·∫£nh ng·∫´u nhi√™n t·ª´ danh s√°ch ·∫£nh ƒë√£ l∆∞u.",
            "L∆∞u √Ω: L·ªánh ch·ªâ ho·∫°t ƒë·ªông trong c√°c nh√≥m ƒë∆∞·ª£c x√°c ƒë·ªãnh l√† NSFW."
        ],
    cooldowns: 0
};

async function downloadImage(url, outputPath) {
    const response = await axios({
        url: url,
        responseType: 'stream'
    });
    return new Promise((resolve, reject) => {
        const writer = fs.createWriteStream(outputPath);
        response.data.pipe(writer);
        writer.on('finish', resolve);
        writer.on('error', reject);
    });
}

module.exports.run = async ({ api, event, Currencies }) => {
    const { senderID, threadID, messageID } = event;

    if (!isNSFWGroup(threadID)) {
        return api.sendMessage("L·ªánh n√†y ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng trong c√°c nh√≥m c√≥ n·ªôi dung NSFW.", threadID, messageID);
    }

    const userData = await Currencies.getData(senderID);
    const userMoney = userData.money || 0;

    if (userMoney < cost) {
        return api.sendMessage("B·∫°n kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ nh·∫≠n ·∫£nh. B·∫°n c·∫ßn √≠t nh·∫•t 10K xu.", threadID, messageID);
    }

    await Currencies.decreaseMoney(senderID, cost);

    const imgurImageUrls = readOrCreateData(imagePath);

    const selectedUrls = [];
    while (selectedUrls.length < 15 && imgurImageUrls.length > 0) {
        const randomIndex = Math.floor(Math.random() * imgurImageUrls.length);
        const url = imgurImageUrls.splice(randomIndex, 1)[0];
        selectedUrls.push(url);
    }

    const imagePaths = [];
    try {
        for (const url of selectedUrls) {
            const outputPath = path.join(__dirname, 'cache', `temp_image_${Date.now()}.png`);
            await downloadImage(url, outputPath);
            imagePaths.push(outputPath);
        }

        api.sendMessage({
            body: "·∫¢nh c·ªßa b·∫°n ƒë√¢y \n-10.000 xu",
            attachment: imagePaths.map(filePath => fs.createReadStream(filePath))
        }, threadID, () => {
            imagePaths.forEach(filePath => fs.unlinkSync(filePath));
        }, messageID);
    } catch (error) {
        console.error('L·ªói khi t·∫£i ·∫£nh:', error);
        return api.sendMessage("C√≥ l·ªói x·∫£y ra khi t·∫£i ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i sau.", threadID, messageID);
    }
};
