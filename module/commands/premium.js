const fs = require('fs-extra');
const path = require('path');
const axios = require('axios');
const { promisify } = require('util');
const stream = require('stream');

const cacheDir = path.join(__dirname, '../commands/cache');
const premiumFilePath = path.join(__dirname, '../commands/json/premium.json');

if (!fs.existsSync(cacheDir)) {
    fs.mkdirSync(cacheDir);
}

const streamPipeline = promisify(stream.pipeline);

module.exports = {
    config: {
        name: "Premium",
        version: "1.0.0",
        hasPermission: 0,
        credits: "HNT",
        description: "C√°ch n√¢ng c·∫•p l√™n g√≥i Premium.",
        usePrefix: true,
        commandCategory: "general",
        usages: "[th√¥ng tin n√¢ng c·∫•p Premium]",
        cooldowns: 0,
        dependencies: {}
    },

    run: async function({ api, event, args }) {
        const { threadID, messageID, senderID } = event;

        let premiumData;
        try {
            premiumData = await fs.readJSON(premiumFilePath);
        } catch (error) {
            console.error("L·ªói khi ƒë·ªçc file premium.json:", error);
            return api.sendMessage("ƒê√£ x·∫£y ra l·ªói khi ki·ªÉm tra th√¥ng tin Premium. Vui l√≤ng th·ª≠ l·∫°i sau.", threadID, messageID);
        }

        const user = premiumData[senderID];
        const isPremium = user ? user.isPremium : false;

        if (isPremium) {
            return api.sendMessage("B·∫°n ƒë√£ c√≥ g√≥i Premium. üòä", threadID, messageID);
        }

        const imageURL = "https://i.imgur.com/eIHIbRK.jpeg"; 
        const imageFileName = path.basename(imageURL);
        const imagePath = path.join(cacheDir, imageFileName);

        try {
            const response = await axios({
                url: imageURL,
                responseType: 'stream'
            });

            await streamPipeline(response.data, fs.createWriteStream(imagePath));

            return api.sendMessage({ body: "üì£ -Th√¥ng B√°o N√¢ng C·∫•p Premium-", attachment: fs.createReadStream(imagePath) }, threadID, messageID);
        } catch (error) {
            console.error("L·ªói khi x·ª≠ l√Ω ·∫£nh:", error);
            return api.sendMessage("ƒê√£ x·∫£y ra l·ªói khi g·ª≠i ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i sau.", threadID, messageID);
        }
    }
};
