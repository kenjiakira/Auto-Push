const axios = require('axios');
const fs = require('fs-extra');
const path = require('path');
const { image } = require('image-downloader');

const cacheDir = path.resolve(__dirname, 'cache');
if (!fs.existsSync(cacheDir)) {
    fs.mkdirsSync(cacheDir);
}

const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

module.exports.config = {
  name: "wiki",
  version: "1.1.0",
  hasPermission: 0,
  credits: "HNT",
  description: "Tra c·ª©u th√¥ng tin t·ª´ Wikipedia.",
  usePrefix: true,
  commandCategory: "utilities",
  usages: "wiki [t·ª´ kh√≥a]",
  cooldowns: 5,
  dependencies: {}
};

async function fetchRandomWikiArticle(retries = 3) {
  const apiUrl = `https://vi.wikipedia.org/api/rest_v1/page/random/summary`;
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      const response = await axios.get(apiUrl);
      const wikiData = response.data;
      if (wikiData.title && wikiData.extract) {
        const imageUrl = wikiData.thumbnail ? wikiData.thumbnail.source : null;
        return {
          title: wikiData.title,
          extract: wikiData.extract,
          url: wikiData.content_urls.desktop.page,
          image: imageUrl
        };
      } else {
        return null;
      }
    } catch (error) {
      if (attempt === retries) {
        throw new Error("Kh√¥ng th·ªÉ truy xu·∫•t th√¥ng tin t·ª´ Wikipedia v√†o l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.");
      }
      console.error(`L·ªói khi truy xu·∫•t th√¥ng tin: ${error.message}. Th·ª≠ l·∫°i l·∫ßn ${attempt}`);
      await delay(2000); // Ch·ªù 2 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i
    }
  }
}

async function downloadImage(url, outputPath) {
  try {
    await image({ url, dest: outputPath });
    console.log(`T·∫£i ·∫£nh th√†nh c√¥ng t·ª´ ${url}`);
  } catch (error) {
    console.error(`L·ªói khi t·∫£i ·∫£nh t·ª´ ${url}: ${error.message}`);
    throw new Error(`Kh√¥ng th·ªÉ t·∫£i h√¨nh ·∫£nh t·ª´ ${url}.`);
  }
}

module.exports.run = async function({ api, event, args }) {
  const searchTerm = args.join(" ");
  const outputPath = path.resolve(cacheDir, 'wiki_image.jpg');

  try {
    if (!searchTerm) {
      // L·∫•y b√†i vi·∫øt ng·∫´u nhi√™n
      const randomWikiArticle = await fetchRandomWikiArticle();
      if (randomWikiArticle) {
        let attachments = [];
        if (randomWikiArticle.image) {
          await downloadImage(randomWikiArticle.image, outputPath);
          attachments.push(fs.createReadStream(outputPath));
        }
        const message = `üìö Wikipedia: ${randomWikiArticle.title}\n\n${randomWikiArticle.extract}\n\nƒê·ªçc th√™m: ${randomWikiArticle.url}\n\nB·∫°n c√≥ th·ªÉ t√¨m th√™m th√¥ng tin b·∫±ng c√°ch nh·∫≠p wiki 't·ª´ kh√≥a'.`;
        api.sendMessage({ body: message, attachment: attachments }, event.threadID, () => {
          // X√≥a ·∫£nh sau khi g·ª≠i
          try {
            if (fs.existsSync(outputPath)) {
              fs.unlinkSync(outputPath);
            }
          } catch (unlinkError) {
            console.error(`Kh√¥ng th·ªÉ x√≥a t·ªáp ${outputPath}: ${unlinkError.message}`);
          }
        });
      } else {
        api.sendMessage("Kh√¥ng th·ªÉ t√¨m th·∫•y th√¥ng tin ng·∫´u nhi√™n t·ª´ Wikipedia v√†o l√∫c n√†y.", event.threadID);
      }
    } else {
      // T√¨m ki·∫øm th√¥ng tin theo t·ª´ kh√≥a
      const apiUrl = `https://vi.wikipedia.org/api/rest_v1/page/summary/${encodeURIComponent(searchTerm)}`;
      for (let attempt = 1; attempt <= 3; attempt++) {
        try {
          const response = await axios.get(apiUrl);
          const wikiData = response.data;
          if (wikiData.title && wikiData.extract) {
            const imageUrl = wikiData.thumbnail ? wikiData.thumbnail.source : null;
            let attachments = [];
            if (imageUrl) {
              await downloadImage(imageUrl, outputPath);
              attachments.push(fs.createReadStream(outputPath));
            }
            const message = `üìö Wikipedia: ${wikiData.title}\n\n${wikiData.extract}\n\nƒê·ªçc th√™m: ${wikiData.content_urls.desktop.page}`;
            api.sendMessage({ body: message, attachment: attachments }, event.threadID, () => {
              // X√≥a ·∫£nh sau khi g·ª≠i
              try {
                if (fs.existsSync(outputPath)) {
                  fs.unlinkSync(outputPath);
                }
              } catch (unlinkError) {
                console.error(`Kh√¥ng th·ªÉ x√≥a t·ªáp ${outputPath}: ${unlinkError.message}`);
              }
            });
            return;
          } else {
            api.sendMessage("Kh√¥ng t√¨m th·∫•y th√¥ng tin t·ª´ kh√≥a n√†y tr√™n Wikipedia.", event.threadID);
            return;
          }
        } catch (error) {
          if (attempt === 3) {
            api.sendMessage("Kh√¥ng th·ªÉ truy xu·∫•t th√¥ng tin t·ª´ Wikipedia v√†o l√∫c n√†y. Vui l√≤ng th·ª≠ l·∫°i sau.", event.threadID);
          } else {
            console.error(`L·ªói khi truy xu·∫•t th√¥ng tin: ${error.message}. Th·ª≠ l·∫°i l·∫ßn ${attempt}`);
            await delay(2000); // Ch·ªù 2 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i
          }
        }
      }
    }
  } catch (error) {
    api.sendMessage(error.message, event.threadID);
  }
};
