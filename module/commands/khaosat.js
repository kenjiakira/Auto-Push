const fs = require('fs-extra');
const path = require('path');
const lockfile = require('lockfile');

const surveyQuestions = [
  "B·∫°n mu·ªën th√™m l·ªánh g√¨ cho bot?",
  "B·∫°n c·∫£m th·∫•y giao di·ªán c·ªßa bot c√≥ c·∫ßn c·∫£i ti·∫øn kh√¥ng? N·∫øu c√≥, h√£y cho bi·∫øt ƒëi·ªÅu g√¨ c·∫ßn thay ƒë·ªïi.",
  "C√≥ t√≠nh nƒÉng n√†o m√† b·∫°n nghƒ© r·∫±ng bot n√™n b·ªï sung ƒë·ªÉ c·∫£i thi·ªán tr·∫£i nghi·ªám c·ªßa b·∫°n?",
  "B·∫°n c√≥ g·∫∑p ph·∫£i kh√≥ khƒÉn g√¨ khi s·ª≠ d·ª•ng bot kh√¥ng? N·∫øu c√≥, vui l√≤ng m√¥ t·∫£.",
  "B·∫°n c√≥ ƒë·ªÅ xu·∫•t g√¨ ƒë·ªÉ l√†m cho bot tr·ªü n√™n h·ªØu √≠ch h∆°n?"
];

const dataFilePath = path.resolve(__dirname, 'json', 'khaosat.json');
const rewardFilePath = path.resolve(__dirname, 'json', 'rewardks.json');
const lockPath = dataFilePath + '.lock';

function readJsonFile() {
  return new Promise((resolve, reject) => {
    lockfile.lock(lockPath, { wait: 5000 }, (err) => {
      if (err) return reject(err);

      fs.readJson(dataFilePath, (err, data) => {
        lockfile.unlock(lockPath, () => {});
        if (err) return reject(err);
        resolve(data);
      });
    });
  });
}

function writeJsonFile(data) {
  return new Promise((resolve, reject) => {
    lockfile.lock(lockPath, { wait: 5000 }, (err) => {
      if (err) return reject(err);

      fs.writeJson(dataFilePath, data, { spaces: 2 }, (err) => {
        lockfile.unlock(lockPath, () => {});
        if (err) return reject(err);
        resolve();
      });
    });
  });
}

module.exports.config = {
  name: "khaosat",
  version: "1.0.6",
  hasPermission: 2,
  credits: "HNT",
  description: "Kh·ªüi t·∫°o kh·∫£o s√°t √Ω ki·∫øn ng∆∞·ªùi d√πng",
  commandCategory: "utilities",
  usePrefix: true,
  usages: "khaosat start - B·∫Øt ƒë·∫ßu kh·∫£o s√°t",
  cooldowns: 10
};

module.exports.run = async ({ api, event, args, Currencies }) => {
  const { threadID, messageID, senderID } = event;

  let rewardsData = await fs.readJson(rewardFilePath, { default: {} });
  let userData = await readJsonFile();

  if (rewardsData[senderID]) {
    return api.sendMessage("B·∫°n ƒë√£ ho√†n t·∫•t kh·∫£o s√°t v√† nh·∫≠n ph·∫ßn th∆∞·ªüng. C·∫£m ∆°n b·∫°n!", threadID, messageID);
  }

  if (args[0] === "start") {
    try {
      if (!userData[senderID]) {
        userData[senderID] = {
          answers: Array(surveyQuestions.length).fill(null),
          startTime: Date.now(),  // L∆∞u th·ªùi gian b·∫Øt ƒë·∫ßu kh·∫£o s√°t
          agreed: false,  // Tr·∫°ng th√°i ƒë·ªìng √Ω n·ªôi quy
          currentQuestionID: null  // ID tin nh·∫Øn c√¢u h·ªèi hi·ªán t·∫°i
        };
        await writeJsonFile(userData);

        // G·ª≠i n·ªôi quy kh·∫£o s√°t
        const rulesMessage = "üìã **N·ªôi Quy Kh·∫£o S√°t** üìã\n\n" +
                             "1. Vui l√≤ng tr·∫£ l·ªùi t·∫•t c·∫£ c√°c c√¢u h·ªèi m·ªôt c√°ch nghi√™m t√∫c v√† chi ti·∫øt.\n" +
                             "2. N·∫øu b·∫°n kh√¥ng th·ªÉ tr·∫£ l·ªùi m·ªôt c√¢u h·ªèi, h√£y ch·ªçn 'Kh√¥ng bi·∫øt' ho·∫∑c b·ªè qua.\n" +
                             "3. Kh√¥ng ch·ªçn c√¢u tr·∫£ l·ªùi ch·ªâ ƒë·ªÉ qua loa ƒë·ªÉ nh·∫≠n ph·∫ßn th∆∞·ªüng.\n" +
                             "4. Th·ªùi gian ho√†n t·∫•t kh·∫£o s√°t t·ªëi thi·ªÉu l√† 1 ph√∫t.\n\n" +
                             "üí¨ Nh·∫≠p 'ƒê·ªìng √Ω' ƒë·ªÉ ti·∫øp t·ª•c kh·∫£o s√°t ho·∫∑c 'H·ªßy' ƒë·ªÉ k·∫øt th√∫c.";
        return api.sendMessage(rulesMessage, threadID, async (error, info) => {
          if (error) {
            console.error("L·ªói khi g·ª≠i n·ªôi quy kh·∫£o s√°t:", error);
          }
          global.client.handleReply.push({
            type: "survey-agreement",
            name: this.config.name,
            author: senderID,
            messageID: info.messageID
          });
        });
      }

      api.sendMessage("B·∫°n ƒë√£ ho√†n t·∫•t kh·∫£o s√°t. C·∫£m ∆°n b·∫°n!", threadID, messageID);
    } catch (error) {
      console.error("L·ªói khi x·ª≠ l√Ω kh·∫£o s√°t:", error);
      api.sendMessage("ƒê√£ x·∫£y ra l·ªói khi b·∫Øt ƒë·∫ßu kh·∫£o s√°t. Vui l√≤ng th·ª≠ l·∫°i sau.", threadID, messageID);
    }
  } else {
    api.sendMessage("‚ö†Ô∏è Vui l√≤ng s·ª≠ d·ª•ng c√∫ ph√°p: khaosat start ƒë·ªÉ b·∫Øt ƒë·∫ßu kh·∫£o s√°t.", threadID, messageID);
  }
};

module.exports.handleReply = async ({ event: e, api, handleReply, Currencies }) => {
  const { threadID, senderID } = e;

  try {
    let userData = await readJsonFile();
    let rewardsData = await fs.readJson(rewardFilePath, { default: {} });

    if (!userData[senderID]) {
      return api.sendMessage("B·∫°n kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y v√¨ ch∆∞a b·∫Øt ƒë·∫ßu kh·∫£o s√°t.", threadID, e.messageID);
    }

    if (rewardsData[senderID]) {
      return api.sendMessage("B·∫°n ƒë√£ ho√†n t·∫•t kh·∫£o s√°t v√† nh·∫≠n ph·∫ßn th∆∞·ªüng. C·∫£m ∆°n b·∫°n!", threadID, e.messageID);
    }

    if (handleReply.type === "survey-agreement") {
      if (e.body.trim().toLowerCase() === "ƒë·ªìng √Ω") {
        userData[senderID].agreed = true;
        await writeJsonFile(userData);
        // Ti·∫øp t·ª•c kh·∫£o s√°t
        const questionIndex = userData[senderID].answers.indexOf(null);
        if (questionIndex !== -1) {
          const question = surveyQuestions[questionIndex];
          api.sendMessage(question, threadID, async (error, info) => {
            if (error) {
              console.error("L·ªói khi g·ª≠i c√¢u h·ªèi kh·∫£o s√°t:", error);
            }
            userData[senderID].currentQuestionID = info.messageID;
            await writeJsonFile(userData);
            global.client.handleReply.push({
              type: "survey",
              name: this.config.name,
              author: senderID,
              questionIndex: questionIndex,
              messageID: info.messageID
            });
          });
        } else {
          api.sendMessage("B·∫°n ƒë√£ ho√†n t·∫•t kh·∫£o s√°t. C·∫£m ∆°n b·∫°n!", threadID, e.messageID);
        }
      } else if (e.body.trim().toLowerCase() === "h·ªßy") {
        delete userData[senderID];
        await writeJsonFile(userData);
        api.sendMessage("Kh·∫£o s√°t ƒë√£ b·ªã h·ªßy.", threadID, e.messageID);
      } else {
        api.sendMessage("‚ö†Ô∏è Vui l√≤ng nh·∫≠p 'ƒê·ªìng √Ω' ƒë·ªÉ ti·∫øp t·ª•c ho·∫∑c 'H·ªßy' ƒë·ªÉ k·∫øt th√∫c.", threadID, e.messageID);
      }
      return;
    }

    if (!userData[senderID].agreed) {
      return api.sendMessage("B·∫°n c·∫ßn ƒë·ªìng √Ω n·ªôi quy tr∆∞·ªõc khi tr·∫£ l·ªùi kh·∫£o s√°t.", threadID, e.messageID);
    }

    // Ki·ªÉm tra ID tin nh·∫Øn c√¢u h·ªèi hi·ªán t·∫°i
    if (e.messageReply && e.messageReply.messageID !== userData[senderID].currentQuestionID) {
      return api.sendMessage("‚ö†Ô∏è B·∫°n ƒëang tr·∫£ l·ªùi sai c√¢u h·ªèi ho·∫∑c kh√¥ng ph·∫£i c√¢u h·ªèi kh·∫£o s√°t hi·ªán t·∫°i.", threadID, e.messageID);
    }

    const answer = e.body.trim().toLowerCase();
    const questionIndex = handleReply.questionIndex;

    if (answer.length < 5) { // Ki·ªÉm tra c√¢u tr·∫£ l·ªùi c√≥ √≠t nh·∫•t 5 k√Ω t·ª±
      return api.sendMessage("‚ö° Vui l√≤ng cung c·∫•p c√¢u tr·∫£ l·ªùi chi ti·∫øt h∆°n.", threadID, e.messageID);
    }

    userData[senderID].answers[questionIndex] = answer;

    await writeJsonFile(userData);

    // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒë√£ ho√†n t·∫•t kh·∫£o s√°t
    if (userData[senderID].answers.includes(null)) {
      const nextQuestionIndex = userData[senderID].answers.indexOf(null);
      const nextQuestion = surveyQuestions[nextQuestionIndex];
      api.sendMessage(nextQuestion, threadID, async (error, info) => {
        if (error) {
          console.error("L·ªói khi g·ª≠i c√¢u h·ªèi kh·∫£o s√°t:", error);
        }
        userData[senderID].currentQuestionID = info.messageID;
        await writeJsonFile(userData);
        global.client.handleReply.push({
          type: "survey",
          name: this.config.name,
          author: senderID,
          questionIndex: nextQuestionIndex,
          messageID: info.messageID
        });
      });
    } else {
      const startTime = userData[senderID].startTime;
      const endTime = Date.now();
      const duration = (endTime - startTime) / 1000; // Th·ªùi gian kh·∫£o s√°t t√≠nh b·∫±ng gi√¢y

      if (duration < 60) { // N·∫øu th·ªùi gian kh·∫£o s√°t < 1 ph√∫t
        delete userData[senderID]; // X√≥a d·ªØ li·ªáu kh·∫£o s√°t
        await writeJsonFile(userData);
        api.sendMessage("Kh·∫£o s√°t c·ªßa b·∫°n b·ªã h·ªßy v√¨ th·ªùi gian ho√†n t·∫•t qu√° nhanh. Vui l√≤ng th·ª≠ l·∫°i.", threadID, e.messageID);
      } else {
        await fs.writeJson(rewardFilePath, { ...rewardsData, [senderID]: true }, { spaces: 2 });
        await Currencies.increaseMoney(senderID, 50000);
        api.sendMessage("B·∫°n ƒë√£ ho√†n t·∫•t kh·∫£o s√°t v√† nh·∫≠n ƒë∆∞·ª£c 50k xu. C·∫£m ∆°n b·∫°n!", threadID, e.messageID);
      }
    }
  } catch (error) {
    console.error("L·ªói khi x·ª≠ l√Ω ph·∫£n h·ªìi kh·∫£o s√°t:", error);
    api.sendMessage("ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω ph·∫£n h·ªìi c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.", threadID, e.messageID);
  }
};
