const fs = require('fs');
const path = require('path');
const sharp = require('sharp');

const combinedImagePath = path.join(__dirname, 'baucua', 'combined_baucua_image.png');
const imageDir = path.join(__dirname, 'baucua', 'images');
const dataDir = path.join(__dirname, 'baucua', 'datauser');

module.exports.config = {
  name: "baucua",
  version: "1.0.0",
  hasPermission: 0,
  credits: "Ho√†ng Ng·ªçc T·ª´",
  description: "Ch∆°i B·∫ßu Cua",
  commandCategory: "game",
  usePrefix: true,
  usages: "baucua <c∆∞·ª£c> <b·∫ßu/cua/c√°/m√®o/t√¥m/nai>\n\n" +
      "H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:\n" +
      "- `<c∆∞·ª£c>`: S·ªë ti·ªÅn b·∫°n mu·ªën c∆∞·ª£c, v√≠ d·ª•: 1000\n" +
      "- `<b·∫ßu/cua/c√°/m√®o/t√¥m/nai>`: Con v·∫≠t b·∫°n d·ª± ƒëo√°n s·∫Ω xu·∫•t hi·ªán, ch·ªçn m·ªôt trong c√°c con v·∫≠t n√†y\n\n" +
      "V√≠ d·ª•:\n" +
      "- C∆∞·ª£c 1000 xu v√†o con m√®o: `baucua 1000 m√®o`\n" +
      "- C∆∞·ª£c 5000 xu v√†o con t√¥m: `baucua 5000 t√¥m`\n\n" +
      "L∆∞u √Ω:\n" +
      "- S·ªë ti·ªÅn c∆∞·ª£c t·ªëi ƒëa l√† 20000 xu.\n" +
      "- B·∫°n ph·∫£i ch·ªù 15 gi√¢y tr∆∞·ªõc khi ch∆°i l·∫°i.",
  cooldowns: 5
};

const playingUsers = new Set();
const maxBet = 20000;

module.exports.onLoad = function() {
  if (!fs.existsSync(imageDir)) fs.mkdirSync(imageDir, { recursive: true });
  if (!fs.existsSync(dataDir)) fs.mkdirSync(dataDir, { recursive: true });
};

const combineImages = async (imagePaths) => {
  try {
    const images = await Promise.all(
      imagePaths.map(imagePath =>
        sharp(imagePath).resize(200, 200).toBuffer()
      )
    );

    const combinedImage = sharp({
      create: {
        width: 600, 
        height: 200,
        channels: 4,
        background: 'white'
      }
    });

    const compositeImage = combinedImage.composite(
      images.map((imageBuffer, index) => ({
        input: imageBuffer,
        top: 0,
        left: index * 200
      }))
    );

    await compositeImage.toFile(combinedImagePath);
    console.log("H√¨nh ·∫£nh ƒë√£ ƒë∆∞·ª£c k·∫øt h·ª£p v√† l∆∞u t·∫°i:", combinedImagePath);
  } catch (error) {
    console.error("L·ªói khi k·∫øt h·ª£p h√¨nh ·∫£nh:", error);
  }
};

const { hasID, isBanned } = require(path.join(__dirname, '..', '..', 'module', 'commands', 'cache', 'accessControl.js'));

module.exports.run = async function({ api, event, args, Currencies }) {
  const { threadID, messageID, senderID } = event;

  if (!(await hasID(senderID))) {
    return api.sendMessage("‚ö° B·∫°n c·∫ßn c√≥ ID ƒë·ªÉ ch∆°i tr√≤ n√†y!\ng√µ .id ƒë·ªÉ t·∫°o ID", threadID, messageID);
  }

  if (await isBanned(senderID)) {
    return api.sendMessage("‚ö° B·∫°n ƒë√£ b·ªã c·∫•m v√† kh√¥ng th·ªÉ ch∆°i tr√≤ n√†y!", threadID, messageID);
  }

  if (playingUsers.has(senderID)) {
    return api.sendMessage("‚è≥ B·∫°n ph·∫£i ch·ªù 15 gi√¢y tr∆∞·ªõc khi ch∆°i l·∫°i.", threadID, messageID);
  }

  if (args.length < 2) {
    return api.sendMessage("üìù B·∫°n ph·∫£i nh·∫≠p s·ªë ti·ªÅn c∆∞·ª£c v√† ch·ªçn m·ªôt trong c√°c con v·∫≠t: b·∫ßu, cua, c√°, m√®o, t√¥m, nai. V√≠ d·ª•: baucua 1000 m√®o", threadID, messageID);
  }

  const betAmount = parseInt(args[0]);
  const chosenAnimal = args[1].toLowerCase();
  const animals = ["b·∫ßu", "cua", "c√°", "m√®o", "t√¥m", "nai"];
  const animalEmojis = {
    "b·∫ßu": "üçê",
    "cua": "ü¶Ä",
    "c√°": "üêü",
    "m√®o": "üêà",
    "t√¥m": "ü¶ê",
    "nai": "ü¶å"
  };

  const animalImages = {
    "b·∫ßu": path.join(imageDir, 'bau.jpg'),
    "cua": path.join(imageDir, 'cua.jpg'),
    "c√°": path.join(imageDir, 'ca.jpg'),
    "m√®o": path.join(imageDir, 'meo.jpg'),
    "t√¥m": path.join(imageDir, 'tom.jpg'),
    "nai": path.join(imageDir, 'nai.jpg')
  };

  if (!animals.includes(chosenAnimal)) {
    return api.sendMessage("‚ùå Con v·∫≠t b·∫°n ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn m·ªôt trong c√°c con v·∫≠t: b·∫ßu, cua, c√°, m√®o, t√¥m, nai. V√≠ d·ª•: baucua 1000 m√®o", threadID, messageID);
  }

  const userData = await Currencies.getData(senderID);
  const userMoney = userData.money;

  if (isNaN(betAmount) || betAmount <= 0) {
    return api.sendMessage("‚ùå S·ªë ti·ªÅn c∆∞·ª£c kh√¥ng h·ª£p l·ªá.", threadID, messageID);
  }

  if (betAmount > userMoney) {
    return api.sendMessage("‚ùå B·∫°n kh√¥ng c√≥ ƒë·ªß ti·ªÅn ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c.", threadID, messageID);
  }

  if (betAmount > maxBet) {
    return api.sendMessage(`‚ùå S·ªë ti·ªÅn c∆∞·ª£c t·ªëi ƒëa l√† ${maxBet} xu.`, threadID, messageID);
  }

  playingUsers.add(senderID);

  const diceResults = Array(3).fill().map(() => animals[Math.floor(Math.random() * animals.length)]);
  const diceResultsWithImages = diceResults.map(animal => animalImages[animal]);

  await combineImages(diceResultsWithImages);

  const winnings = diceResults.filter(animal => animal === chosenAnimal).length * betAmount;

  let message;
  if (winnings > 0) {
    await Currencies.increaseMoney(senderID, winnings);
    message = `üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ th·∫Øng ${winnings} xu.`;
  } else {
    await Currencies.decreaseMoney(senderID, betAmount);
    message = `üò¢ R·∫•t ti·∫øc! B·∫°n ƒë√£ thua ${betAmount} xu.`;
  }

  api.sendMessage({
    body: message,
    attachment: fs.createReadStream(combinedImagePath)
  }, threadID, messageID);

  setTimeout(() => playingUsers.delete(senderID), 15000); 
};
