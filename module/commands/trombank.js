const fs = require('fs');
const path = require('path');

const bankFilePath = path.join(__dirname, 'json', 'bankData.json');
const rankingFilePath = path.join(__dirname, 'json', 'ranking.json');
const equipmentFilePath = path.join(__dirname, 'json', 'equipment.json');
const skillsFilePath = path.join(__dirname, 'json', 'skills.json');

let bankData = {};
let rankingData = {};
let equipmentData = {};
let skillsData = {};

try {
  if (fs.existsSync(bankFilePath)) {
    bankData = JSON.parse(fs.readFileSync(bankFilePath, 'utf8'));
  }
  if (fs.existsSync(rankingFilePath)) {
    rankingData = JSON.parse(fs.readFileSync(rankingFilePath, 'utf8'));
  }
  if (fs.existsSync(equipmentFilePath)) {
    equipmentData = JSON.parse(fs.readFileSync(equipmentFilePath, 'utf8'));
  }
  if (fs.existsSync(skillsFilePath)) {
    skillsData = JSON.parse(fs.readFileSync(skillsFilePath, 'utf8'));
  }
} catch (error) {
  console.error("Error reading JSON files:", error);
}

const cooldowns = new Map();
const MAX_ATTEMPTS = 3;
const EVENT_START_HOUR = 15; 
const EVENT_END_HOUR = 22;   

module.exports.config = {
  name: "trombank",
  version: "1.1.0",
  hasPermission: 2,
  credits: "HNT",
  description: "Th·ª±c hi·ªán tr·ªôm ng√¢n h√†ng v·ªõi nhi·ªÅu t√≠nh nƒÉng v√† th·ª≠ th√°ch m·ªói Ch·ªß Nh·∫≠t.",
  commandCategory: "game",
  usePrefix: true,
  usages: "trombank [nhi·ªám v·ª•] [trang b·ªã] [k·ªπ nƒÉng]",
  cooldowns: 5
};

module.exports.run = async ({ api, event, args, Currencies }) => {
  const { senderID, threadID, messageID } = event;
  const currentTime = Date.now();
  const now = new Date();
  
  const eventStartTime = new Date();
  eventStartTime.setHours(EVENT_START_HOUR, 0, 0, 0);
  const eventEndTime = new Date();
  eventEndTime.setHours(EVENT_END_HOUR, 0, 0, 0);

  if (now.getDay() !== 0) { 
    return api.sendMessage("‚ùå S·ª± ki·ªán ch·ªâ di·ªÖn ra v√†o Ch·ªß Nh·∫≠t. H√£y quay l·∫°i v√†o th·ªùi gian s·ª± ki·ªán.", threadID, messageID);
  }

  if (currentTime < eventStartTime.getTime() || currentTime > eventEndTime.getTime()) {
    return api.sendMessage("‚ùå S·ª± ki·ªán ch·ªâ di·ªÖn ra t·ª´ 15:00 ƒë·∫øn 22:00 m·ªói Ch·ªß Nh·∫≠t.", threadID, messageID);
  }

  api.sendMessage("üé≠ Ch·ªçn nhi·ªám v·ª• c·ªßa b·∫°n: \n1. Ng√¢n H√†ng HCB(2ChanBank)\n2. Ng√¢n H√†ng VCL(ViCongLy)\n3. Ng√¢n H√†ng AkiBank", threadID, (error, info) => {
    if (error) console.log(error);
    
    global.client.handleReply.push({
      type: "missionSelection",
      name: "bankheist",
      author: senderID,
      messageID: info.messageID,
      data: { senderID, threadID }
    });
  });
};

module.exports.handleReply = async function({ api, event, handleReply, Currencies }) {
  const { senderID, threadID, messageID, body } = event;
  
  switch (handleReply.type) {
    case "missionSelection":
      const missionChoice = body.trim();
      if (!["1", "2", "3"].includes(missionChoice)) {
        return api.sendMessage("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn l·∫°i: \n1. Ng√¢n H√†ng HCB(2ChanBank)\n2. Ng√¢n H√†ng VCL(ViCongLy)\n3. Ng√¢n H√†ng AkiBank", threadID, messageID);
      }
      const missionType = getMissionType(missionChoice);
      api.sendMessage(`üîß B·∫°n ƒë√£ ch·ªçn ${missionType.name}. Ch·ªçn trang b·ªã c·ªßa b·∫°n: \n1. M√°y ph√° m√£\n2. Thi·∫øt b·ªã d√≤ camera\n3. B·ªô d·ª•ng c·ª• m·ªü kh√≥a`, threadID, (error, info) => {
        if (error) console.log(error);
        
        global.client.handleReply.push({
          type: "equipmentSelection",
          name: "bankheist",
          author: senderID,
          messageID: info.messageID,
          data: { mission: missionType, senderID, threadID }
        });
      });
      break;
      
    case "equipmentSelection":
      const equipmentChoice = body.trim();
      if (!["1", "2", "3"].includes(equipmentChoice)) {
        return api.sendMessage("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn l·∫°i: \n1. M√°y ph√° m√£\n2. Thi·∫øt b·ªã d√≤ camera\n3. B·ªô d·ª•ng c·ª• m·ªü kh√≥a", threadID, messageID);
      }
      const equipmentType = getEquipment(equipmentChoice);
      api.sendMessage(`üõ†Ô∏è B·∫°n ƒë√£ ch·ªçn ${equipmentType}. Ch·ªçn k·ªπ nƒÉng c·ªßa b·∫°n: \n1. Hacker\n2. L√©n l√∫t\n3. S·ª©c m·∫°nh`, threadID, (error, info) => {
        if (error) console.log(error);
        
        global.client.handleReply.push({
          type: "skillSelection",
          name: "bankheist",
          author: senderID,
          messageID: info.messageID,
          data: { mission: handleReply.data.mission, equipment: equipmentType, senderID, threadID }
        });
      });
      break;
      
    case "skillSelection":
      const skillChoice = body.trim();
      if (!["1", "2", "3"].includes(skillChoice)) {
        return api.sendMessage("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng ch·ªçn l·∫°i: \n1. Hacker\n2. L√©n l√∫t\n3. S·ª©c m·∫°nh", threadID, messageID);
      }
      const skillType = getSkill(skillChoice);
      const { mission, equipment } = handleReply.data;
      await performHeist(api, event, mission, equipment, skillType, Currencies); // Truy·ªÅn Currencies v√†o ƒë√¢y
      break;
  }
};

function getMissionType(selection) {
  const missions = {
    "1": { name: "Ng√¢n H√†ng HCB (2ChanBank)", successRate: 0.3, amount: 10000, penalty: 1000, cooldown: 10 * 60 * 1000 },
    "2": { name: "Ng√¢n H√†ng VCL (V√¨ C√¥ng L√Ω)", successRate: 0.2, amount: 50000, penalty: 5000, cooldown: 20 * 60 * 1000 },
    "3": { name: "Ng√¢n H√†ng AkiBank", successRate: 0.1, amount: 100000, penalty: 10000, cooldown: 30 * 60 * 1000 }
  };
  return missions[selection];
}

function getEquipment(selection) {
  const equipments = {
    "1": "M√°y ph√° m√£",
    "2": "Thi·∫øt b·ªã d√≤ camera",
    "3": "B·ªô d·ª•ng c·ª• m·ªü kh√≥a"
  };
  return equipments[selection];
}

function getSkill(selection) {
  const skills = {
    "1": "Hacker",
    "2": "L√©n l√∫t",
    "3": "S·ª©c m·∫°nh"
  };
  return skills[selection];
}
async function performHeist(api, event, mission, equipment, skill, Currencies) {
  const { senderID, threadID, messageID } = event;
  const currentTime = Date.now();
  const attempts = bankData[senderID]?.attempts || 0;

  if (attempts >= MAX_ATTEMPTS) {
    // G·ª≠i th√¥ng b√°o khi ng∆∞·ªùi ch∆°i ƒë√£ h·∫øt l∆∞·ª£t th·ª≠
    return api.sendMessage("‚ùå B·∫°n ƒë√£ ƒë·∫°t s·ªë l·∫ßn th·ª≠ t·ªëi ƒëa. Vui l√≤ng th·ª≠ l·∫°i sau.", threadID, messageID);
  }

  // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ API
  const userInfo = await api.getUserInfo(senderID);
  const userName = userInfo[senderID]?.name || 'Ng∆∞·ªùi ch∆°i';

  const successRate = mission.successRate + getSkillBonus(skill) - getEquipmentPenalty(equipment);
  const success = Math.random() < successRate;
  const amount = mission.amount;

  if (success) {
    await Currencies.increaseMoney(senderID, amount);
    bankData[senderID] = { ...bankData[senderID], attempts: 0 };
    fs.writeFileSync(bankFilePath, JSON.stringify(bankData, null, 2), 'utf8');
    
    updateRanking(senderID, amount);

    api.sendMessage(`‚úÖ ${userName} ƒë√£ th√†nh c√¥ng trong vi·ªác tr·ªôm ${amount} xu t·ª´ ng√¢n h√†ng ${mission.name}.`, threadID, messageID);
  } else {
    const penalty = mission.penalty;
    await Currencies.decreaseMoney(senderID, penalty);
    bankData[senderID] = { ...bankData[senderID], attempts: (attempts || 0) + 1 };
    fs.writeFileSync(bankFilePath, JSON.stringify(bankData, null, 2), 'utf8');

    if (attempts + 1 >= MAX_ATTEMPTS) {
      // G·ª≠i th√¥ng b√°o khi ng∆∞·ªùi ch∆°i ƒë√£ h·∫øt l∆∞·ª£t th·ª≠
      api.sendMessage(`‚ùå ${userName} ƒë√£ b·ªã b·∫Øt v√† b·ªã ph·∫°t ${penalty} xu. B·∫°n ƒë√£ ƒë·∫°t s·ªë l·∫ßn th·ª≠ t·ªëi ƒëa. Vui l√≤ng th·ª≠ l·∫°i sau.`, threadID, messageID);
    } else {
      api.sendMessage(`‚ùå ${userName} ƒë√£ b·ªã b·∫Øt v√† b·ªã ph·∫°t ${penalty} xu. S·ªë l·∫ßn th·ª≠ c√≤n l·∫°i: ${MAX_ATTEMPTS - (attempts || 0) - 1}.`, threadID, messageID);
    }
  }
}


function getSkillBonus(skill) {
  const bonuses = {
    "Hacker": 0.05,
    "L√©n l√∫t": 0.1,
    "S·ª©c m·∫°nh": 0.15
  };
  return bonuses[skill] || 0;
}

function getEquipmentPenalty(equipment) {
  const penalties = {
    "M√°y ph√° m√£": 0.05,
    "Thi·∫øt b·ªã d√≤ camera": 0.1,
    "B·ªô d·ª•ng c·ª• m·ªü kh√≥a": 0.1
  };
  return penalties[equipment] || 0;
}

function updateRanking(senderID, amount) {
  if (!rankingData[senderID]) {
    rankingData[senderID] = { totalAmount: 0 };
  }
  rankingData[senderID].totalAmount += amount;
  fs.writeFileSync(rankingFilePath, JSON.stringify(rankingData, null, 2), 'utf8');
}
