const axios = require('axios');

module.exports.config = {
    name: "stock",
    version: "1.0.0",
    hasPermission: 0,
    credits: "HNT",
    description: "Cung c·∫•p th√¥ng tin v·ªÅ c·ªï phi·∫øu.",
    commandCategory: "T√†i ch√≠nh",
    usePrefix: true,
    usages: `
    *Cung c·∫•p th√¥ng tin c·ªï phi·∫øu:*

    1. Tra c·ª©u th√¥ng tin c·ªï phi·∫øu:
       - C√∫ ph√°p \`.stock [k√Ω hi·ªáu c·ªï phi·∫øu]\`
       - H∆∞·ªõng d·∫´n Thay th·∫ø \`[k√Ω hi·ªáu c·ªï phi·∫øu]\` b·∫±ng k√Ω hi·ªáu c·ªßa c·ªï phi·∫øu b·∫°n mu·ªën tra c·ª©u. V√≠ d·ª•: \`.stock AAPL\` ƒë·ªÉ xem th√¥ng tin c·ªï phi·∫øu c·ªßa Apple Inc. (AAPL).

    2. G·ª£i √Ω k√Ω hi·ªáu c·ªï phi·∫øu ph·ªï bi·∫øn:
       - Apple Inc. AAPL
       - Microsoft Corporation MSFT
       - Google (Alphabet Inc.) GOOGL
       - Amazon.com Inc. AMZN
       - Tesla Inc. TSLA
       - Meta Platforms Inc. (Facebook) META
       - NVIDIA Corporation NVDA
       - Netflix Inc. NFLX
       - IBM Corporation IBM
       - Intel Corporation INTC

    *Ch√∫ √Ω*: K√Ω hi·ªáu c·ªï phi·∫øu c√≥ th·ªÉ thay ƒë·ªïi v√† c√°c c√¥ng ty c√≥ th·ªÉ ƒë∆∞·ª£c ni√™m y·∫øt v·ªõi nhi·ªÅu k√Ω hi·ªáu kh√°c nhau tr√™n c√°c s√†n giao d·ªãch kh√°c nhau.
    `,
    cooldowns: 5,
    dependencies: {}
};

const apiKey = 'cql2tu9r01qn7frrckn0cql2tu9r01qn7frrckng';

module.exports.run = async function({ api, event, args }) {
    const { threadID, messageID } = event;

    if (args.length === 0) {
        const suggestions = `
        ƒê·ªÉ tra c·ª©u th√¥ng tin c·ªï phi·∫øu, b·∫°n c·∫ßn cung c·∫•p k√Ω hi·ªáu c·ªï phi·∫øu. V√≠ d·ª•: !stock AAPL ƒë·ªÉ xem th√¥ng tin v·ªÅ Apple Inc.

        G·ª£i √Ω c√°c k√Ω hi·ªáu c·ªï phi·∫øu ph·ªï bi·∫øn:
        - Apple Inc. AAPL
        - Microsoft Corporation MSFT
        - Google (Alphabet Inc.) GOOGL
        - Amazon.com Inc. AMZN
        - Tesla Inc. TSLA
        - Meta Platforms Inc. (Facebook) META
        - NVIDIA Corporation NVDA
        - Netflix Inc. NFLX
        - IBM Corporation IBM
        - Intel Corporation INTC

        *Ch√∫ √Ω*: K√Ω hi·ªáu c·ªï phi·∫øu c√≥ th·ªÉ thay ƒë·ªïi v√† c√°c c√¥ng ty c√≥ th·ªÉ ƒë∆∞·ª£c ni√™m y·∫øt v·ªõi nhi·ªÅu k√Ω hi·ªáu kh√°c nhau tr√™n c√°c s√†n giao d·ªãch kh√°c nhau.
        `;
        return api.sendMessage(suggestions, threadID, messageID);
    }

    const symbol = args[0].toUpperCase();

    try {
        const response = await axios.get('https://finnhub.io/api/v1/quote', {
            params: {
                symbol: symbol,
                token: apiKey
            }
        });

        const data = response.data;

        if (!data) {
            return api.sendMessage("Kh√¥ng c√≥ d·ªØ li·ªáu c·ªï phi·∫øu cho k√Ω hi·ªáu n√†y. Vui l√≤ng ki·ªÉm tra l·∫°i k√Ω hi·ªáu c·ªï phi·∫øu.", threadID, messageID);
        }

        const { c: currentPrice, h: highPrice, l: lowPrice, o: openPrice, pc: previousClosePrice } = data;

        const message = `Th√¥ng tin c·ªï phi·∫øu ${symbol}:\n` +
                        `üìà Gi√° m·ªü c·ª≠a: ${openPrice} USD\n` +
                        `üìà Gi√° cao nh·∫•t: ${highPrice} USD\n` +
                        `üìâ Gi√° th·∫•p nh·∫•t: ${lowPrice} USD\n` +
                        `üíµ Gi√° hi·ªán t·∫°i: ${currentPrice} USD\n` +
                        `üíµ Gi√° ƒë√≥ng c·ª≠a tr∆∞·ªõc ƒë√≥: ${previousClosePrice} USD`;

        api.sendMessage(message, threadID, messageID);
    } catch (error) {
        console.error(error);
        api.sendMessage("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin c·ªï phi·∫øu. Vui l√≤ng th·ª≠ l·∫°i sau.", threadID, messageID);
    }
};
