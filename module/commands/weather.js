const axios = require('axios');
const translate = require('translate-google');
const fs = require('fs').promises;

module.exports.config = {
  name: "weather",
  version: "1.0.3",
  hasPermission: 0,
  credits: "Akira",
  description: "Tra c·ª©u th√¥ng tin th·ªùi ti·∫øt v√† th√¥ng b√°o t·ª± ƒë·ªông",
  usePrefix: true,
  commandCategory: "utilities",
  usages: "weather [t√™n th√†nh ph·ªë]",
  cooldowns: 5,
  dependencies: {}
};

const apiKey = "1230a8fdc6457603234c68ead5f3f967";
const apiUrl = "https://api.openweathermap.org/data/2.5/weather";

const cities = [
    "H√† N·ªôi", "H·ªì Ch√≠ Minh", "ƒê√† N·∫µng", "C·∫ßn Th∆°", "Hu·∫ø", "Nha Trang", "Th√°i Nguy√™n"
];

function getRandomCities(num = 1) {
    const shuffled = cities.sort(() => 0.5 - Math.random());
    return shuffled.slice(0, num);
}

async function getWeather(cityName) {
  const params = {
    q: cityName,
    appid: apiKey,
    units: "metric"
  };

  try {
    const response = await axios.get(apiUrl, { params });
    return response.data;
  } catch (error) {
    console.error(`L·ªói khi g·ªçi API th·ªùi ti·∫øt: ${error.response ? error.response.data.message : error.message}`);
    throw new Error("Kh√¥ng t√¨m th·∫•y th√¥ng tin th·ªùi ti·∫øt cho th√†nh ph·ªë/khu v·ª±c n√†y.");
  }
}

async function notifyWeather(api) {
    if (!api || !api.sendMessage) {
        console.error('ƒê·ªëi t∆∞·ª£ng api kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng c√≥ ph∆∞∆°ng th·ª©c sendMessage.');
        return;
    }

    console.log('B·∫Øt ƒë·∫ßu th√¥ng b√°o th·ªùi ti·∫øt...');
    const randomCities = getRandomCities(1);
    
    let threadIDs = [];
    try {
        const data = await fs.readFile('module/commands/noti/groups.json', 'utf8');
        const jsonData = JSON.parse(data);
        threadIDs = jsonData.map(entry => entry.threadID);
    } catch (error) {
        console.error("L·ªói khi ƒë·ªçc t·ªáp groups.json:", error.message);
        return;
    }
    
    for (const city of randomCities) {
        try {
            console.log(`D·ªãch t√™n th√†nh ph·ªë: ${city}`);
            let translatedCityName = await translate(city, { to: "en" });
            if (typeof translatedCityName === 'object' && translatedCityName.text) {
                translatedCityName = translatedCityName.text;
            }
            console.log(`T√™n th√†nh ph·ªë ƒë√£ d·ªãch: ${translatedCityName}`);
            const weatherData = await getWeather(translatedCityName);

            if (!weatherData || !weatherData.weather || !weatherData.main || !weatherData.wind) {
                console.log('D·ªØ li·ªáu th·ªùi ti·∫øt kh√¥ng ƒë·∫ßy ƒë·ªß.');
                continue;
            }

            const weatherDescription = weatherData.weather[0]?.description || "Kh√¥ng c√≥ m√¥ t·∫£";
            const temp = weatherData.main?.temp || "Kh√¥ng c√≥ d·ªØ li·ªáu";
            const tempMin = weatherData.main?.temp_min || "Kh√¥ng c√≥ d·ªØ li·ªáu";
            const tempMax = weatherData.main?.temp_max || "Kh√¥ng c√≥ d·ªØ li·ªáu";
            const humidity = weatherData.main?.humidity || "Kh√¥ng c√≥ d·ªØ li·ªáu";
            const windSpeed = weatherData.wind?.speed || "Kh√¥ng c√≥ d·ªØ li·ªáu";

            const message = `Th·ªùi ti·∫øt t·∫°i ${weatherData.name}:\nüå§Ô∏è M√¥ t·∫£: ${weatherDescription}\nüå°Ô∏è Nhi·ªát ƒë·ªô: ${temp}¬∞C\nüîΩ Nhi·ªát ƒë·ªô t·ªëi thi·ªÉu: ${tempMin}¬∞C\nüîº Nhi·ªát ƒë·ªô t·ªëi ƒëa: ${tempMax}¬∞C\nüíß ƒê·ªô ·∫©m: ${humidity}%\nüí® T·ªëc ƒë·ªô gi√≥: ${windSpeed} m/s`;

            if (threadIDs.length === 0) {
                console.log('Danh s√°ch Thread ID kh√¥ng h·ª£p l·ªá ho·∫∑c tr·ªëng.');
                continue;
            }

            console.log(`G·ª≠i th√¥ng b√°o ƒë·∫øn c√°c Thread ID: ${threadIDs}`);
            threadIDs.forEach(threadID => {
                if (threadID) {
                    try {
                        api.sendMessage(message, threadID);
                    } catch (sendError) {
                        console.error(`L·ªói khi g·ª≠i th√¥ng b√°o ƒë·∫øn Thread ID ${threadID}:`, sendError.message);
                    }
                } else {
                    console.log('Thread ID kh√¥ng h·ª£p l·ªá:', threadID);
                }
            });

        } catch (error) {
            console.error(`L·ªói khi l·∫•y th√¥ng tin th·ªùi ti·∫øt cho ${city}:`, error.message);
        }
    }
}

module.exports.run = async function({ api, event, args }) {
  const cityName = args.join(" ");
  if (!cityName) {
    return api.sendMessage("B·∫°n ch∆∞a nh·∫≠p t√™n th√†nh ph·ªë/khu v·ª±c c·∫ßn tra c·ª©u th·ªùi ti·∫øt.", event.threadID);
  }

  try {
    let translatedCityName = cityName;
    if (!/^[a-zA-Z\s]+$/.test(cityName)) { 
      try {
        translatedCityName = await translate(cityName, { to: "en" });
        if (typeof translatedCityName === 'object' && translatedCityName.text) {
          translatedCityName = translatedCityName.text;
        }
      } catch (error) {
        return api.sendMessage("C√≥ l·ªói x·∫£y ra khi d·ªãch t√™n th√†nh ph·ªë. Vui l√≤ng ki·ªÉm tra l·∫°i.", event.threadID);
      }
    }

    if (typeof translatedCityName !== 'string') {
      return api.sendMessage("T√™n th√†nh ph·ªë kh√¥ng th·ªÉ d·ªãch ƒë∆∞·ª£c. Vui l√≤ng ki·ªÉm tra l·∫°i.", event.threadID);
    }

    const weatherData = await getWeather(translatedCityName);

    if (!weatherData || !weatherData.weather || !weatherData.main || !weatherData.wind) {
      return api.sendMessage("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt. Vui l√≤ng th·ª≠ l·∫°i sau.", event.threadID);
    }

    const weatherDescription = weatherData.weather[0]?.description || "Kh√¥ng c√≥ m√¥ t·∫£";
    const temp = weatherData.main?.temp || "Kh√¥ng c√≥ d·ªØ li·ªáu";
    const tempMin = weatherData.main?.temp_min || "Kh√¥ng c√≥ d·ªØ li·ªáu";
    const tempMax = weatherData.main?.temp_max || "Kh√¥ng c√≥ d·ªØ li·ªáu";
    const humidity = weatherData.main?.humidity || "Kh√¥ng c√≥ d·ªØ li·ªáu";
    const windSpeed = weatherData.wind?.speed || "Kh√¥ng c√≥ d·ªØ li·ªáu";

    const message = `Th·ªùi ti·∫øt t·∫°i ${weatherData.name}:\nüå§Ô∏è M√¥ t·∫£: ${weatherDescription}\nüå°Ô∏è Nhi·ªát ƒë·ªô: ${temp}¬∞C\nüîΩ Nhi·ªát ƒë·ªô t·ªëi thi·ªÉu: ${tempMin}¬∞C\nüîº Nhi·ªát ƒë·ªô t·ªëi ƒëa: ${tempMax}¬∞C\nüíß ƒê·ªô ·∫©m: ${humidity}%\nüí® T·ªëc ƒë·ªô gi√≥: ${windSpeed} m/s`;

    api.sendMessage(message, event.threadID);
  } catch (error) {
    api.sendMessage("C√≥ l·ªói x·∫£y ra khi l·∫•y th√¥ng tin th·ªùi ti·∫øt. Vui l√≤ng th·ª≠ l·∫°i sau.", event.threadID);
  }
};

module.exports.onLoad = function({ api }) {
  const now = new Date();
  const vietnamTimezoneOffset = 7 * 60 * 60 * 1000;
  const localTime = new Date(now.getTime() + vietnamTimezoneOffset);
  
  const minutesUntilNextHour = 60 - localTime.getMinutes();
  const msUntilNextHour = (minutesUntilNextHour * 60 + (60 - localTime.getSeconds())) * 1000; 

  console.log(`ƒêang ch·ªù ${msUntilNextHour} ms ƒë·ªÉ th√¥ng b√°o v√†o gi·ªù ti·∫øp theo.`);

  setTimeout(() => {
      console.log('G·ª≠i th√¥ng b√°o th·ªùi ti·∫øt ƒë·∫ßu ti√™n.');
      notifyWeather(api); 
      setInterval(() => {
          console.log('G·ª≠i th√¥ng b√°o th·ªùi ti·∫øt m·ªói gi·ªù.');
          notifyWeather(api); 
      }, 60 * 60 * 1000);
  }, msUntilNextHour);
};
