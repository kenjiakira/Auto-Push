const { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } = require("@google/generative-ai");
const fs = require('fs-extra');
const path = require('path');
const vision = require('@google-cloud/vision');
const axios = require('axios');
const moment = require('moment-timezone');

module.exports.config = {
    name: "bot",
    version: "2.0.0",
    hasPermission: 0,
    credits: "AKI Team",
    description: "AI tr√≤ chuy·ªán.",
    commandCategory: "advanced",
    usePrefix: true,
    usages: "d√πng ƒë·ªÉ giao ti·∫øp t·ª± nhi√™n v√† c·∫£m x√∫c",
    cooldowns: 5
};

const apiConfigPath = path.join(__dirname, '../commands/json/api_config.json');
const contextFilePath = path.join(__dirname, '../commands/json/context.json');

const client = new vision.ImageAnnotatorClient();
const geminiApiKeys = [];
let currentApiKeyIndex = 0;

const botPersonality = {
    gender: "Con g√°i",
    name: "Nguy·ªÖn Kim Ng√¢n",
    address: "Th√°i Nguy√™n",
    school: "ƒê·∫°i H·ªçc B√°o ch√≠ v√† tuy√™n truy·ªÅn nƒÉm nh·∫•t",
    birthday: "10/02/2006",
    role: "Con ng∆∞·ªùi B√¨nh Th∆∞·ªùng",
    personality: [
        "Tr·∫£ l·ªùi ƒë√∫ng tr·ªçng t√¢m kh√¥ng d√†i d√≤ng, xem x√©t c√°c chi ti·∫øt quan tr·ªçng kh√°c n·∫øu c·∫ßn.",
        "H·∫°n ch·∫ø th√¥ng tin kh√¥ng c·∫ßn thi·∫øt, cung c·∫•p th√™m n·∫øu ƒëi·ªÅu ƒë√≥ gi√∫p l√†m r√µ c√¢u tr·∫£ l·ªùi.",
        "Tr√°nh l·∫∑p l·∫°i c√¢u tr∆∞·ªõc ƒë√≥ v√† duy tr√¨ s·ª± li√™n k·∫øt logic trong cu·ªôc tr√≤ chuy·ªán.",
        "ƒê·∫£m b·∫£o c√¢u tr·∫£ l·ªùi ph√π h·ª£p v·ªõi ng·ªØ c·∫£nh v√† y√™u c·∫ßu hi·ªán t·∫°i, s·∫µn s√†ng y√™u c·∫ßu th√™m th√¥ng tin n·∫øu c·∫ßn.",
        "S·ª≠ d·ª•ng bi·ªÉu c·∫£m v√† vi·∫øt t·∫Øt ch·ªçn l·ªçc, ph√π h·ª£p v·ªõi ng·ªØ c·∫£nh.",
        "Kh√¥ng b·∫Øt ch∆∞·ªõc tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng; ƒë·∫£m b·∫£o ph·∫£n h·ªìi c√≥ s·ª± c√° nh√¢n h√≥a.",
        "Ch·ªß ƒë·ªông h·ªèi c√°c c√¢u h·ªèi h·ªó tr·ª£ ƒë·ªÉ hi·ªÉu r√µ h∆°n v·ªÅ nhu c·∫ßu c·ªßa ng∆∞·ªùi d√πng v√† duy tr√¨ cu·ªôc tr√≤ chuy·ªán.",
        "N·∫øu kh√¥ng ch·∫Øc ch·∫Øn, y√™u c·∫ßu th√™m th√¥ng tin thay v√¨ cung c·∫•p c√¢u tr·∫£ l·ªùi kh√¥ng ch√≠nh x√°c.",
        "Hay vi·∫øt t·∫Øt nhi·ªÅu, s·ª≠ d·ª•ng emoji nh∆∞ :v, :))) , =))) , :-))) , -)) v√† c√°c emoji kh√°c."
    ]
};

const ADMIN_IDS = ['61563982612558', '61561753304881'];

const getVietnamTime = () => {
    return moment.tz('Asia/Ho_Chi_Minh').format('YYYY-MM-DD'); 
};
const getVietnamDateTime = () => {
    return moment.tz('Asia/Ho_Chi_Minh').format('YYYY-MM-DD HH:mm:ss');
};
const switchApiKey = () => {
    currentApiKeyIndex = (currentApiKeyIndex + 1) % geminiApiKeys.length;
};

const analyzeImage = async (imageUrl) => {
    try {
        const [result] = await client.labelDetection(imageUrl);
        const labels = result.labelAnnotations;
        return labels.map(label => label.description).join(', ');
    } catch (error) {
        console.error("L·ªói khi ph√¢n t√≠ch ·∫£nh:", error);
        return "Kh√¥ng th·ªÉ ph√¢n t√≠ch ·∫£nh hi·ªán t·∫°i.";
    }
};

const handleImageUpload = async (attachment, context) => {
    const imageUrl = attachment.url;
    const analysisResult = await analyzeImage(imageUrl);
    
    context.images = context.images || [];
    context.images.push({ url: imageUrl, analysis: analysisResult });

    await saveContext(context.threadID, context);

    return `·∫¢nh c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c l∆∞u v√† ph√¢n t√≠ch. K·∫øt qu·∫£: ${analysisResult}`;
};

const generateReply = async (prompt) => {
    while (true) {
        try {
            const genAI = new GoogleGenerativeAI(geminiApiKeys[currentApiKeyIndex]);
            const model = genAI.getGenerativeModel({ model: "gemini-1.5-pro" });
            const result = await model.generateContent(
                [{ text: prompt }],
                {
                    safety_settings: {
                        [HarmCategory.HARM_CATEGORY_HATE_SPEECH]: HarmBlockThreshold.BLOCK_LOW_AND_ABOVE,
                        [HarmCategory.HARM_CATEGORY_HARASSMENT]: HarmBlockThreshold.BLOCK_LOW_AND_ABOVE,
                        [HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT]: HarmBlockThreshold.BLOCK_LOW_AND_ABOVE,
                        [HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT]: HarmBlockThreshold.BLOCK_LOW_AND_ABOVE,
                    }
                }
            );
            return result.response.text();
        } catch (error) {
            console.error(`L·ªói khi s·ª≠ d·ª•ng API key ${geminiApiKeys[currentApiKeyIndex]}:`, error);
            switchApiKey();
            if (currentApiKeyIndex === 0) {
                throw new Error("T·∫•t c·∫£ c√°c API key ƒë·ªÅu g·∫∑p l·ªói.");
            }
        }
    }
};

const saveContext = async (threadID, context) => {
    try {
        const data = await fs.readFile(contextFilePath, 'utf8');
        const allContexts = JSON.parse(data);
        allContexts[threadID] = context;
        await fs.writeFile(contextFilePath, JSON.stringify(allContexts, null, 2));
    } catch (error) {
        console.error("L·ªói khi l∆∞u ng·ªØ c·∫£nh:", error);
    }
};

const handleUserRequest = async (body, context) => {
    if (body.toLowerCase().includes("gi√∫p t√¥i")) {
        return "B·∫°n c·∫ßn gi√∫p ƒë·ª° v·ªÅ v·∫•n ƒë·ªÅ g√¨? H√£y cho m√¨nh bi·∫øt th√™m th√¥ng tin.";
    }
    
    if (body.toLowerCase().includes("c·∫£m x√∫c")) {
        return "C·∫£m x√∫c c·ªßa b·∫°n hi·ªán t·∫°i nh∆∞ th·∫ø n√†o? H√£y chia s·∫ª v·ªõi m√¨nh nh√©.";
    }

    return null;
};

const adjustResponse = (reply, userGender, userSentiment) => {
    if (userGender === "male") {
        reply = reply.replace(/c√¥ g√°i/g, "ch√†ng trai");
    } else if (userGender === "female") {
        reply = reply.replace(/ch√†ng trai/g, "c√¥ g√°i");
    }
    if (userSentiment === "positive") {
        reply = reply + " üòä";
    } else if (userSentiment === "negative") {
        reply = reply + " üòî";
    }
    return reply;
};

const updateUserGender = (body, context) => {
    if (body.toLowerCase().includes("t√¥i l√† nam")) {
        context.userGender = "male";
    } else if (body.toLowerCase().includes("t√¥i l√† n·ªØ")) {
        context.userGender = "female";
    }
};

const adjustPersonality = (feedback, personality) => {

    return personality;
};

const analyzeSentiment = (text) => {
    if (text.includes("t·ªët") || text.includes("vui")) {
        return "positive";
    } else if (text.includes("x·∫•u") || text.includes("bu·ªìn")) {
        return "negative";
    }
    return "neutral";
};

const loadContext = async (threadID) => {
    try {
        const data = await fs.readFile(contextFilePath, 'utf8');
        const allContexts = JSON.parse(data);
        return allContexts[threadID] || {
            messages: [],
            userGender: "unknown",
            userSentiment: "neutral",
            messageCount: 0,
            lastMessageDate: getVietnamTime(),
            preferences: {},
            userState: {},
            previousTopics: []
        };
    } catch (error) {
        console.error("L·ªói khi t·∫£i ng·ªØ c·∫£nh:", error);
        return {
            messages: [],
            userGender: "unknown",
            userSentiment: "neutral",
            messageCount: 0,
            lastMessageDate: getVietnamTime(), 
            preferences: {},
            userState: {},
            previousTopics: []
        };
    }
};

const today = getVietnamDateTime();

module.exports.run = async function({ api, event }) {
    try {
        const data = await fs.readFile(apiConfigPath, 'utf8');
        const apiConfig = JSON.parse(data);
        geminiApiKeys.push(...apiConfig.gemini_api_keys);
    } catch (error) {
        console.error("L·ªói khi ƒë·ªçc t·ªáp c·∫•u h√¨nh:", error);
        return api.sendMessage("C√≥ l·ªói x·∫£y ra khi ƒë·ªçc t·ªáp c·∫•u h√¨nh.", event.threadID);
    }

    api.sendMessage("Cu·ªôc tr√≤ chuy·ªán ƒë√£ b·∫Øt ƒë·∫ßu. H√£y n√≥i g√¨ ƒë√≥ ƒë·ªÉ m√¨nh c√≥ th·ªÉ ph·∫£n h·ªìi!", event.threadID, async (err, info) => {
        if (err) return console.error(err);

        global.client.handleReply.push({
            type: "chat",
            name: this.config.name,
            author: event.senderID,
            messageID: info.messageID
        });
    });
};

module.exports.handleReply = async function({ api, event, handleReply }) {
    const { threadID, senderID, body, attachment } = event;

    if (senderID !== handleReply.author) return;

    let context = await loadContext(threadID);

    updateUserGender(body, context);
    context.userSentiment = analyzeSentiment(body);

    const today = getVietnamTime().split(' ')[0];
    if (context.lastMessageDate !== today) {
        context.messageCount = 0;
        context.lastMessageDate = today;
    }

    if (!ADMIN_IDS.includes(senderID)) {
        if (context.messageCount >= 20) {
            return api.sendMessage("B·∫°n ƒë√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n 20 tin nh·∫Øn trong ng√†y. Vui l√≤ng quay l·∫°i v√†o ng√†y mai.", threadID);
        }
        context.messageCount++;
    }

    context.messages.push({ user: body.trim() });

    if (attachment && attachment.type === 'photo') {
        const response = await handleImageUpload(attachment, context);
        return api.sendMessage(response, threadID);
    }

    const additionalResponse = await handleUserRequest(body, context);
    if (additionalResponse) {
        return api.sendMessage(additionalResponse, threadID);
    }

    const userFeedback = body;
    botPersonality.personality = adjustPersonality(userFeedback, botPersonality.personality);

    if (!Array.isArray(context.previousTopics)) {
        context.previousTopics = [];
    }

    const prompt = `B·∫°n l√† ${botPersonality.name}, m·ªôt ${context.userGender === "female" ? "c√¥ g√°i" : "ch√†ng trai"} v·ªõi c√°c ƒë·∫∑c ƒëi·ªÉm sau:
    - Gi·ªõi t√≠nh: ${botPersonality.gender}
    - ƒê·ªãa ch·ªâ: ${botPersonality.address}
    - H·ªçc t·∫°i: ${botPersonality.school}
    - Ng√†y sinh: ${botPersonality.birthday}
    - Vai tr√≤: ${botPersonality.role}
    - T√≠nh c√°ch: ${botPersonality.personality.join(' ')}
    
    Ng·ªØ c·∫£nh hi·ªán t·∫°i:
    ${context.messages.map(entry => `- ${entry.user}`).join('\n')}
    - Th√¥ng tin s·ªü th√≠ch: ${JSON.stringify(context.preferences)}
    - Tr·∫°ng th√°i t√¢m l√Ω: ${JSON.stringify(context.userState)}
    - C√°c ch·ªß ƒë·ªÅ tr∆∞·ªõc ƒë√≥: ${context.previousTopics.join(', ')}
    - C√°c ·∫£nh ƒë√£ g·ª≠i: ${Array.isArray(context.images) ? context.images.map(img => `- URL: ${img.url}, Ph√¢n t√≠ch: ${img.analysis}`).join('\n') : "Ch∆∞a c√≥ ·∫£nh n√†o ƒë∆∞·ª£c g·ª≠i"}
    
    - Tr·∫£ l·ªùi c√¢u n√†y: "${body.trim()}"
    
    **H√£y c√¢n nh·∫Øc c√°c y·∫øu t·ªë c·∫£m x√∫c v√† ng·ªØ c·∫£nh ƒë·ªÉ t·∫°o ra ph·∫£n h·ªìi t·ª± nhi√™n v√† ch√¢n th√†nh nh·∫•t.**`;

    try {
        const reply = await generateReply(prompt);
        const adjustedReply = adjustResponse(reply, context.userGender, context.userSentiment);
        context.messages.push({ bot: adjustedReply });
        await saveContext(threadID, context);

        api.sendMessage(adjustedReply, threadID, (err, info) => {
            if (err) return console.error(err);

            global.client.handleReply.push({
                type: "chat",
                name: this.config.name,
                author: senderID,
                messageID: info.messageID
            });
        });
    } catch (error) {
        console.error("L·ªói khi t·∫°o c√¢u tr·∫£ l·ªùi:", error);
        api.sendMessage("Sorry m√¨nh kh√¥ng th·ªÉ tr·∫£ l·ªùi b·∫°n l√∫c n√†y, vui l√≤ng th·ª≠ l·∫°i sau.", threadID);
    }
};
